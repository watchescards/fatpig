{"version":3,"sources":["components/Typography/PageTitle.js","../node_modules/classnames/index.js","assets/img/money.png","assets/img/bnb.png","components/CTA.js","components/Cards/InfoCard.js","components/RoundIcon.js","utils/timeDifference.js","utils/numberWithCommas.js","pages/Dashboard.js"],"names":["PageTitle","children","className","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","default","CTA","text","holdings","addrFilledColorConditional","address","undefined","substring","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","href","target","rel","dangerouslySetInnerHTML","__html","InfoCard","title","value","icon","RoundIcon","Icon","iconColorClass","bgColorClass","cls","TimeDifference","current","previous","elapsed","secs","Math","round","msPerMinute","mins","msPerHour","hours","msPerDay","numberWithCommas","x","toString","replace","Dashboard","props","INSTINCTPrice","INSTINCTVolume","setINSTINCTVolume","bnbPrice","wallet","setWallet","getWallet","highestBuyers","bnbHoldings","totalPaid","paid","lastPaid","nextPayoutProgress","nextPayoutValue","contract","setHoldings","setPaid","setLastPaid","setAddress","setNextPayoutProgress","setNextPayoutValue","useState","Number","toFixed","payoutText","Date","now","earningsInDollars","earningsInBnb","compoundedINSTINCTAfterNDays","starting","days","accumulatedINSTINCT","ethers","utils","isAddress","CoinsIcon","DollarIcon","LockIcon","ClockIcon","disabled","onClick","claim","src","require","onChange","e","isNaN","parseFloat"],"mappings":"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","file":"static/js/3.720b09d8.chunk.js","sourcesContent":["import React from 'react'\n\nfunction PageTitle({ children }) {\n  return (\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\n  )\n}\n\nexport default PageTitle\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","module.exports = __webpack_public_path__ + \"static/media/money.d301ec34.png\";","module.exports = __webpack_public_path__ + \"static/media/bnb.162aaf57.png\";","import React, { useEffect } from 'react'\n\nimport { ethers } from 'ethers'\n\nfunction CTA({ text, holdings, address }) {\n\n  const addrFilledColorConditional = (text !== undefined && text !== '' && (text.substring(0, 2) === '0x')) ? 'bg-blue-400' : 'bg-blue-400'\n\n  return (\n    <div className=\"hidden lg:block\">\n    <span\n      className={`flex items-center justify-between p-4 mb-8 text-sm font-semibold text-gray-900 dark:text-purple-100 ${addrFilledColorConditional} rounded-lg shadow-md focus:outline-none focus:shadow-outline-blue`}\n    >\n      <div className=\"flex items-center\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 mr-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z\" />\n        </svg>\n        <span>{(text !== undefined && text !== '' && (text.substring(0, 2) === '0x')) ? holdings < 10000 ? text + ' - YOU NEED MORE THAN 100000000 FAT TO RECEIVE DIVIDENDS' : text : 'Please enter your address above'}</span>\n      </div>\n      <a href=\"https://exchange.pancakeswap.finance/#/swap?outputCurrency=\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Buy FAT <span dangerouslySetInnerHTML={{ __html: '&RightArrow;' }}></span>\n      </a>\n    </span>\n    </div>\n  )\n}\n\nexport default CTA\n","import React from 'react'\nimport { Card, CardBody } from '@windmill/react-ui'\n\nfunction InfoCard({ title, value, children: icon }) {\n  return (\n    <Card>\n      <CardBody className=\"flex items-center\">\n        {icon}\n        <div>\n          <p className=\"mb-2 text-sm font-medium text-gray-600 dark:text-gray-400\">{title}</p>\n          <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-200\">{value}</p>\n        </div>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default InfoCard\n","import React from 'react'\nimport classNames from 'classnames'\n\nfunction RoundIcon({\n  icon: Icon,\n  iconColorClass = 'text-purple-600 dark:text-purple-100',\n  bgColorClass = 'bg-purple-100 dark:bg-purple-600',\n  className,\n}) {\n  const baseStyle = 'p-3 rounded-md'\n\n  const cls = classNames(baseStyle, iconColorClass, bgColorClass, className)\n  return (\n    <div className={cls}>\n      <Icon className=\"w-5 h-10\" />\n    </div>\n  )\n}\n\nexport default RoundIcon\n","export default function TimeDifference(current, previous) {\n\n  var msPerMinute = 60 * 1000;\n  var msPerHour = msPerMinute * 60;\n  var msPerDay = msPerHour * 24;\n  var msPerMonth = msPerDay * 30;\n  var msPerYear = msPerDay * 365;\n\n  var elapsed = current - previous;\n\n  if (elapsed < msPerMinute) {\n      const secs = Math.round(elapsed/1000)\n      return secs > 1 ? secs + ' Seconds Ago' : secs + ' Second Ago';   \n  }\n\n  else if (elapsed < msPerHour) {\n      const mins = Math.round(elapsed/msPerMinute)\n      return mins > 1 ? mins + ' Minutes Ago' : mins + ' Minute Ago';   \n  }\n\n  else if (elapsed < msPerDay ) {\n      const hours = Math.round(elapsed/msPerHour )\n      return hours > 1 ? hours + ' Hours Ago' : hours + ' Hour Ago';  \n  }\n\n  else if (elapsed < msPerMonth) {\n      return '~ ' + Math.round(elapsed/msPerDay) + ' days Ago';   \n  }\n\n  else if (elapsed < msPerYear) {\n      return '~ ' + Math.round(elapsed/msPerMonth) + ' months Ago';   \n  }\n\n  else {\n      return '~ ' + Math.round(elapsed/msPerYear ) + ' years Ago';   \n  }\n}","export default function numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}","import React, { useState, useEffect } from 'react'\n\nimport { ethers } from 'ethers'\n\nimport CTA from '../components/CTA'\nimport InfoCard from '../components/Cards/InfoCard'\nimport PageTitle from '../components/Typography/PageTitle'\nimport RoundIcon from '../components/RoundIcon'\nimport { ClockIcon, LockIcon, DollarIcon, CoinsIcon } from '../icons'\nimport { Card, CardBody, Button } from '@windmill/react-ui'\n\nimport TimeDifference from '../utils/timeDifference'\nimport numberWithCommas from '../utils/numberWithCommas'\n\nfunction Dashboard(props) {\n\n  const { INSTINCTPrice, INSTINCTVolume, setINSTINCTVolume, wallet, setWallet, getWallet, highestBuyers, bnbPrice, bnbHoldings, totalPaid, holdings, paid, lastPaid, address, nextPayoutProgress, nextPayoutValue, setHoldings, setPaid, setLastPaid, setAddress, setNextPayoutProgress, setNextPayoutValue, contract } = props\n\n  const [reinvestContract, setReinvestContract] = useState(null)\n  const [INSTINCTContract, setINSTINCTContract] = useState(null)\n  const [reinvested, setReinvested] = useState(false)\n  const [claimed, setClaimed] = useState(false)\n  const [reinvestAmount, setReinvestAmount] = useState((Number(bnbHoldings)-((2000000*15*1000000000)/1e18)) > 0 ? (Number(bnbHoldings)-((2000000*15*1000000000)/1e18)).toFixed(4) : '0')\n\n  const reinvestInput = <><span>Reinvest </span><input onClick={e => e.stopPropagation()} type=\"text\" className=\"w-1/3 text-black text-center\" value={reinvestAmount} onChange={e => setReinvestAmount(isNaN(e.target.value) ? reinvestAmount : e.target.value)} /><span> BNB (click here to confirm)</span></>\n  const payoutText = <><span className=\"text-blue-400\">{nextPayoutValue != 0 ? nextPayoutValue + ' BNB' : 'Processing'}</span>{Date.now()-lastPaid >= 3600000 ? ` | ${nextPayoutProgress}%` : ` | ${(60-((Date.now()-lastPaid)/60000)).toFixed(0)}m`}</>\n\n  const earningsInDollars = INSTINCTVolume == 0 ? (holdings/1000000000)*220000 : (holdings/1000000000)*(INSTINCTVolume*0.11)\n  const earningsInBnb = earningsInDollars/bnbPrice\n\n  const compoundedINSTINCTAfterNDays = (starting, days) => {\n    let accumulatedINSTINCT = Number(starting)\n    for (let i = 0; i < days; i++) {\n      accumulatedINSTINCT = INSTINCTVolume == 0 ? accumulatedINSTINCT + (((accumulatedINSTINCT/1000000000)*220000)/INSTINCTPrice) : accumulatedINSTINCT + (((accumulatedINSTINCT/1000000000)*(INSTINCTVolume*0.11))/INSTINCTPrice)\n    }\n    return accumulatedINSTINCT.toFixed(0)\n  }\n\n  return (\n    <div className=\"pb-10\">\n\n      <PageTitle className=\"text-3xl\">FAT Earnings Manager</PageTitle>\n\n      <CTA holdings={holdings} text={(address !== \"\" && ethers.utils.isAddress(address) && bnbHoldings !== 0) ? `${address} | BNB In Your Wallet: ${bnbHoldings} ($${numberWithCommas((bnbHoldings*bnbPrice).toFixed(2))})` : address} />\n\n      <div className=\"grid gap-6 md:grid-cols-2 xl:grid-cols-4\">\n        <InfoCard title=\"Your FAT Holdings\" value={`${numberWithCommas(holdings)} FAT`}>\n          <RoundIcon\n            icon={CoinsIcon}\n            iconColorClass=\"text-blue-500\"\n            bgColorClass=\"bg-blue-100\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n        \n        <Card>\n          <CardBody className=\"flex items-center\">\n            <RoundIcon\n              icon={DollarIcon}\n              iconColorClass=\"text-blue-500\"\n              bgColorClass=\"bg-blue-100\"\n              className=\"mr-4\"\n            />\n            <div>\n              <p className=\"mb-2 text-sm font-medium text-gray-600 dark:text-gray-400\">Total BNB Paid</p>\n              \n              <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-200\"><span className=\"text-blue-400\">{`${(paid / 1e18).toFixed(4)}`}</span><span className=\"italic font-light text-md text-green-400\"> ~${numberWithCommas(((paid / 1e18)*bnbPrice).toFixed(2))}</span></p>\n            </div>\n          </CardBody>\n        </Card>\n\n        <InfoCard className=\"\" title=\"Last Payout Time\" value={`${lastPaid === 0 ? 'Never' : TimeDifference(Date.now(), lastPaid)}`}>\n            <RoundIcon\n              icon={LockIcon}\n              iconColorClass=\"text-blue-500 \"\n              bgColorClass=\"bg-blue-100\"\n              className=\"mr-4\"\n            />\n        </InfoCard>\n        \n        <Card>\n          <CardBody className=\"flex items-center\">\n            <RoundIcon\n              icon={ClockIcon}\n              iconColorClass=\"text-blue-500\"\n              bgColorClass=\"bg-blue-100\"\n              className=\"mr-4\"\n            />\n            <div>\n              <p className=\"mb-2 text-sm font-medium text-gray-600 dark:text-gray-400\">Payout Loading</p>\n              \n              <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-200\">{payoutText}</p>\n            </div>\n          </CardBody>\n        </Card>\n\n      </div>\n        <Card className=\"mt-4\">\n          <CardBody className=\"flex items-center\">\n            <Button disabled={nextPayoutValue == 0 ? true : false} className={`w-full h-full text-lg font-semibold`}\n                onClick={() => {\n                if (contract !== null) {\n                  contract.claim()\n                } \n              }}>{\n              nextPayoutValue == 0 ? 'No Payout Currently Available' : contract !== null ? 'Connect & Claim' : 'Claim Payout'}</Button>\n          \n          {/* <Button disabled={(INSTINCTPrice === null) || (holdings == 0) || reinvested} className=\"ml-4 w-1/2 h-full text-lg font-bold\" style={{backgroundColor: '#239470', boxShadow: '0px 0px 20px #057a55'}} onClick={\n            () => {\n              if (wallet !== null && reinvestContract !== null) {\n                if (INSTINCTPrice == 0) return\n                const tokensOut = (((Number(reinvestAmount)*bnbPrice)/INSTINCTPrice)*0.93)\n\n                const encodedABI = reinvestContract.interface.encodeFunctionData( 'swapETHForExactTokens', [ethers.utils.parseEther(tokensOut.toFixed(0)), Date.now()+300000])\n\n                wallet.getTransactionCount().then(nonce => {\n                  const tx = {\n                    chainId: 56,\n                    nonce: ethers.utils.hexlify(nonce),\n                    gasPrice: ethers.utils.hexlify(5*1000000000),\n                    gasLimit: ethers.utils.hexlify(2000000),\n                    to: reinvestContract.address,\n                    value: ethers.utils.parseEther(reinvestAmount.toString()),\n                    data: encodedABI\n                  }\n\n                  wallet.sendTransaction(tx).then(confirmation => {\n                    setReinvested(true)\n                  })\n\n                })\n              } else {\n                getWallet().then(wallet => {\n                  setWallet(wallet[0])\n                  setAddress(wallet[1])\n                  setReinvestContract(wallet[2])\n                  setINSTINCTContract(wallet[3])\n                })\n              }\n            }}>\n              <span className=\"w-full\" style={{textShadow: '1px 1px 1px black'}}>\n                  {holdings == 0 ? \"You Do Not Own Enough INSTINCT To Reinvest\" : wallet !== null ? reinvested ? `Reinvested ${reinvestAmount} BNB at Only 5% Buy Tax!` : reinvestInput : \"Connect and Reinvest With ONLY 5% Buy Tax!\"}\n              </span>\n          </Button> */}\n          \n          </CardBody>\n        </Card>\n        \n      \n\n      <div className=\"grid grid-cols-2 gap-4 mt-4\">\n\n        <Card className=\"col-span-2\">\n          <CardBody className=\"flex flex-col text-center items-center\">\n            <img className=\"w-32 h-32 mb-4 mt-4\" src={require('../assets/img/bnb.png')} />\n            <p className=\"mt-4 font-semibold text-gray-600 dark:text-gray-300 text-3xl text-center\">Total BNB Paid To FAT Holders</p><br/>\n            <p className=\"text-green-400 dark:text-green-400 text-4xl md:text-6xl text-center mb-8\">{numberWithCommas(totalPaid)} <span className=\"text-blue-400\">BNB</span><br/> = ${numberWithCommas((bnbPrice*totalPaid).toFixed(0))}</p>\n          </CardBody>\n        </Card>\n\n        <Card className=\"col-span-2\">\n          <CardBody className=\"flex flex-col text-center items-center\">\n            <p className=\"text-gray-600 dark:text-gray-400 text-xl text-center -mt-2\">Estimations are based on a default of the last 24h of trading volume<br/>Change the volume to predict earnings based on other volume figures<br/>Trading Volume = $ <input className=\"text-black\" value={numberWithCommas(INSTINCTVolume.toFixed(0))} onChange={e => isNaN(Number(parseFloat(e.target.value.replace(/,/g, '')))) ? INSTINCTVolume : setINSTINCTVolume(Number(parseFloat(e.target.value.replace(/,/g, ''))))} /></p>\n          </CardBody>\n        </Card>\n\n        <Card className=\"col-span-2 lg:col-span-1\">\n          <CardBody className=\"flex flex-col text-center items-center\">\n            <img className=\"w-32 h-32 mb-4 mt-4\" src={require('../assets/img/money.png')} />\n            <p className=\"mt-4 font-semibold text-gray-600 dark:text-gray-300 text-3xl text-center\">Your {numberWithCommas(holdings)} FAT Earns:</p><br/>\n            <div className=\"flex\">\n              <p className=\"text-green-400 dark:text-green-400 text-2xl text-center\"><span className=\"text-blue-400\">{numberWithCommas(earningsInBnb.toFixed(2))} BNB</span> (${numberWithCommas((earningsInDollars).toFixed(2))})</p><span className=\"text-gray-600 dark:text-gray-400 text-xl text-center ml-2 mt-2\">Per Day</span>\n            </div>\n            <div className=\"flex\">\n              <p className=\"text-green-400 dark:text-green-400 text-2xl text-center\"><span className=\"text-blue-400\">{numberWithCommas((earningsInBnb*7).toFixed(2))} BNB</span> (${numberWithCommas((earningsInDollars*7).toFixed(2))})</p><span className=\"text-gray-600 dark:text-gray-400 text-xl text-center ml-2 mt-2\">Per Week</span>\n            </div>\n            <div className=\"flex\">\n              <p className=\"text-green-400 dark:text-green-400 text-2xl text-center\"><span className=\"text-blue-400\">{numberWithCommas((earningsInBnb*30).toFixed(2))} BNB</span> (${numberWithCommas((earningsInDollars*30).toFixed(2))})</p><span className=\"text-gray-600 dark:text-gray-400 text-xl text-center ml-2 mt-2\">Per Month</span>\n            </div>\n            <div className=\"flex\">\n              <p className=\"text-green-400 dark:text-green-400 text-2xl text-center\"><span className=\"text-blue-400\">{numberWithCommas((earningsInBnb*365).toFixed(2))} BNB</span> (${numberWithCommas((earningsInDollars*365).toFixed(2))})</p><span className=\"text-gray-600 dark:text-gray-400 text-xl text-center ml-2 mt-2\">Per Year</span>\n            </div>\n            <br/>\n            <p className=\"text-gray-600 dark:text-gray-400 text-xl text-center -mt-2\">Dynamic estimations based on trading volume of ${numberWithCommas(INSTINCTVolume.toFixed(0))}</p>\n          </CardBody>\n        </Card>\n        <Card className=\"col-span-2 lg:col-span-1\">\n          <CardBody className=\"flex flex-col text-center items-center\">\n            <img className=\"w-32 h-32 mb-4 mt-4\" src={require('../assets/img/money.png')} />\n            <p className=\"mt-4 font-semibold text-gray-600 dark:text-gray-300 text-3xl text-center\">By Reinvesting Dividends Every Day, Your {numberWithCommas(holdings)} FAT Becomes:</p><br/>\n            <div className=\"flex\">\n              <p className=\"text-green-400 dark:text-green-400 text-2xl text-center\"><span className=\"text-blue-400\">{holdings != 0 ? numberWithCommas(compoundedINSTINCTAfterNDays(holdings, 7)) : '0'} FAT</span> ({holdings != 0 ? (compoundedINSTINCTAfterNDays(holdings, 7)/holdings).toFixed(2) : '0'}x Earnings)</p><span className=\"text-gray-600 dark:text-gray-400 text-xl text-center ml-2 mt-1\">In a Week</span>\n            </div>\n            <div className=\"flex\">\n              <p className=\"text-green-400 dark:text-green-400 text-2xl text-center\"><span className=\"text-blue-400\">{holdings != 0 ? numberWithCommas(compoundedINSTINCTAfterNDays(holdings, 30)) : '0'} FAT</span> ({holdings != 0 ? (compoundedINSTINCTAfterNDays(holdings, 30)/holdings).toFixed(2) : '0'}x Earnings)</p><span className=\"text-gray-600 dark:text-gray-400 text-xl text-center ml-2 mt-1\">In a Month</span>\n            </div>\n            <div className=\"flex\">\n              <p className=\"text-green-400 dark:text-green-400 text-2xl text-center\"><span className=\"text-blue-400\">{holdings != 0 ? numberWithCommas(compoundedINSTINCTAfterNDays(holdings, 182)) : '0'} FAT</span> ({holdings != 0 ? (compoundedINSTINCTAfterNDays(holdings, 182)/holdings).toFixed(2) : '0'}x Earnings)</p><span className=\"text-gray-600 dark:text-gray-400 text-xl text-center ml-2 mt-1\">In 6 Months</span>\n            </div>\n            <div className=\"flex\">\n              <p className=\"text-green-400 dark:text-green-400 text-2xl text-center\"><span className=\"text-blue-400\">{holdings != 0 ? numberWithCommas(compoundedINSTINCTAfterNDays(holdings, 365)) : '0'} FAT</span> ({holdings != 0 ? (compoundedINSTINCTAfterNDays(holdings, 365)/holdings).toFixed(2) : '0'}x Earnings)</p><span className=\"text-gray-600 dark:text-gray-400 text-xl text-center ml-2 mt-1\">In 1 Year</span>\n            </div>\n            <br/>\n            <p className=\"text-gray-600 dark:text-gray-400 text-xl text-center -mt-2\">Estimations are based on current $FAT price (${INSTINCTPrice.toFixed(4)})</p>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\n\nexport default Dashboard\n"],"sourceRoot":""}